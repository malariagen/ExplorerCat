package net.explorercat.application;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import net.explorercat.cql.selection.query.precalculated.PrecalculatedQueryLoader;
import net.explorercat.plugins.PluginLoader;
import net.explorercat.plugins.PluginLoadingException;
import net.explorercat.staticresources.StaticResourceLoader;
import net.explorercat.util.exceptions.ExplorerCatCheckedException;
import net.explorercat.util.misc.FileDeleter;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Loads resources after deploying the web application.
 * 
 * Resources included: flatten tables generated by the DRR system, DAOs, caches,
 * pre-calculated data.
 * 
 * Note the loading could take a while.
 * 
 * @author Jacob Almagro Garcia - jg10@sanger.ac.uk
 * @date 25 Aug 2010
 */

public class ApplicationInitializer implements ServletContextListener
{
    // Logging
    private static Log log = LogFactory.getLog(ApplicationInitializer.class);

    // Temporal folder for downloads.
    private static final String DOWNLOAD_FOLDER_PATH;

    // Name of the file that describes a plug-in (manifest)
    private static final String PLUGIN_MANIFEST_FILENAME;

    // Path to the folder that contains all the plug-ins.
    private static final String PLUGINS_FOLDER_PATH;

    // Path to the XML file that contains the queries to be pre-calculated.
    private static final String PRECALCULTED_QUERIES_FILE_PATH;

    // Path to the XML file that describes all the static resources available.
    private static final String STATIC_RESOURCES_FILE_PATH;

    // Application controller: Initializes and provides access to global resources.
    private ApplicationController controller;

    static
    {
	ApplicationPropertyLookup lookup = ApplicationPropertyLookup.getInstance();
	DOWNLOAD_FOLDER_PATH = lookup.getGlobalProperty("config.download.folder");
	PLUGIN_MANIFEST_FILENAME = lookup.getGlobalProperty("config.plugins.manifestFilename");
	PLUGINS_FOLDER_PATH = lookup.getGlobalProperty("config.plugins.folderPath");
	PRECALCULTED_QUERIES_FILE_PATH = lookup.getGlobalProperty("config.precalculated.queriesFile");
	STATIC_RESOURCES_FILE_PATH = lookup.getGlobalProperty("config.resources.staticResourcesFile");
    }

    @Override
    public void contextDestroyed(ServletContextEvent arg0)
    {
	if(log.isDebugEnabled())
	    log.debug("Shutting down web application");
    }

    @Override
    public void contextInitialized(ServletContextEvent arg0)
    {
	if(log.isDebugEnabled())
	    log.debug("Initializing web application");

	// Initialises all the global resources.
	controller = ApplicationController.getInstance();
	controller.init();

	// Configure the application, step by step.
	cleanResources();
	loadSystemPrecalculatedQueries();
	loadStaticResources();
	loadPlugins();

    }

    private void cleanResources()
    {
	// Delete all temporal files from previous executions.
	FileDeleter.deleteAllFilesContainedInFolder(DOWNLOAD_FOLDER_PATH);
    }

    private void loadSystemPrecalculatedQueries()
    {
	try
	{
	    if(log.isDebugEnabled())
		log.debug("Loading system pre-calculated queries");

	    PrecalculatedQueryLoader loader = controller.getPrecalculatedQueryLoader();
	    loader.loadPrecalculatedQueriesFromXMLFile(PRECALCULTED_QUERIES_FILE_PATH);
	}
	catch(ExplorerCatCheckedException e)
	{
	    log.error("ERROR loading SYSTEM precalculated queries");
	    e.printStackTrace();
	}
    }

    private void loadStaticResources()
    {
	try
	{
	    if(log.isDebugEnabled())
		log.debug("Loading static resources");

	    StaticResourceLoader loader = new StaticResourceLoader();
	    loader.loadStaticResourcesFromXMLFile(STATIC_RESOURCES_FILE_PATH);
	}
	catch(ExplorerCatCheckedException e)
	{
	    log.error("Error loading static resources " + e);
	}
    }

    private void loadPlugins()
    {
	try
	{
	    if(log.isDebugEnabled())
		log.debug("Loading plugins into the registry.");

	    // Initializes the plug-in registry.
	    PluginLoader pluginLoader = new PluginLoader(PLUGIN_MANIFEST_FILENAME);
	    pluginLoader.loadPluginsIntoRegistry(PLUGINS_FOLDER_PATH);

	    if(log.isDebugEnabled())
		log.debug("All the plugins loaded.");

	}
	catch(PluginLoadingException e)
	{
	    log.error("ERROR loading plug-ins : " + e.getPluginName() + " : " + e.getReason());
	}
    }
}
