package net.explorercat.cql.interpreters;

import java.io.IOException;

import net.explorercat.cql.parser.CQLLexer;
import net.explorercat.cql.parser.CQLParser;
import net.explorercat.cql.parser.CQLSemanticException;
import net.explorercat.cql.parser.CQLTreeWalker;
import net.explorercat.cql.parser.CQLTreeWalker.cqlScript_return;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Interpreter for the Catalog Query Language (CQL). This class is in charge of
 * parsing and interpreting CQL scripts, returning a context object that can be
 * used to retrieve results.
 * 
 * @author Jacob Almagro Garcia - jg10@sanger.ac.uk
 * @date 7 Oct 2010
 */

public class CQLInterpreter
{
    // Logging
    private static final Log log = LogFactory.getLog(CQLInterpreter.class);

    /**
     * Interprets all the queries contained in a CQL file.
     * 
     * @param filename The path to the CQL file that will be interpreted.
     * @return A context object that can be used to generate results.
     * @throws CQLScriptInterpreterException If there is an error interpreting
     *         the CQL script.
     */

    public CQLScriptContext interpretCQLFile(String filename) throws CQLScriptInterpreterException
    {
	try
	{
	    ANTLRFileStream sourceFile = new ANTLRFileStream(filename);
	    CQLScriptContext context = interpret(sourceFile);
	    return context;
	}
	catch(IOException e)
	{
	    log.error("Precalculated queries file not present: " + filename);
	    throw new CQLScriptInterpreterException(e);
	}
    }

    /**
     * Interprets a CQL dynamic query.
     * 
     * @param query The query to be interpreted.
     * @return A context object that can be used to generate results or null if
     *         there was an error interpreting the script.
     * @throws CQLScriptInterpreterException If there is an error interpreting
     *         the CQL script.
     */

    public CQLScriptContext interpretCQLQuery(String query) throws CQLScriptInterpreterException
    {
	ANTLRStringStream queryStream = new ANTLRStringStream(query);
	return interpret(queryStream);
    }

    /**
     * Auxiliary method that parses and interprets the content of the given
     * input stream (a file or a string), returning the objects generated by the
     * tree walker.
     * 
     * @param inputStream Stream that contains the CQL script to be interpreted.
     * @return A context object that can be used to generate results.
     */

    private CQLScriptContext interpret(CharStream inputStream) throws CQLScriptInterpreterException
    {		
	CQLLexer lexer = null;
	CQLParser parser = null;
	CQLTreeWalker treeWalker = null;

	try
	{
	    String querySource = inputStream.getSourceName() != null ? inputStream.getSourceName() : "DynamicQuery";
	    
	    lexer = new CQLLexer(inputStream);
	    CommonTokenStream tokenStream = new CommonTokenStream(lexer);
	    
	    parser = new CQLParser(tokenStream);
	    CQLParser.cqlScript_return parsing = parser.cqlScript();

	    CommonTree tree = (CommonTree) parsing.getTree();	   

	    CommonTreeNodeStream nodeStream = new CommonTreeNodeStream(tree);
	    nodeStream.setTokenStream(tokenStream);	    	    
	    
	    treeWalker = new CQLTreeWalker(nodeStream);
	    cqlScript_return output = treeWalker.cqlScript();	    

	    return new CQLScriptContext(querySource, output.scriptSelectionMap, output.scriptResultGenerator);
	}
	catch(CQLSemanticException e)
	{
	    throw new CQLScriptInterpreterException(e);
	}
	catch(Exception e)
	{
	    e.printStackTrace();
	    throw new CQLScriptInterpreterException("Error interpreting script", parser.getErrors());
	}
    }
}
